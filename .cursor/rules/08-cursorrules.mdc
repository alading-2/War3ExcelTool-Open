---
description: 
globs: 
alwaysApply: true
---
# CursorRules 总结

本规则文件总结了用户在与Cursor对话和协作开发过程中的实际经验，旨在帮助后续开发者更高效地与Cursor配合。

## 规则部分（重点）
# 用户自定义规则（关键）
- 本项目使用anaconda环境，不应该用pip下载包
- 用户给出方案希望总结优化时，应该指出用户没说清楚的地方，并详细给出总结优化的建议
- 用户说生成提示词时，同时要生成项目的详细实现步骤
- 生成阶段，按照实现步骤分阶段、分文件提出详细的改进计划和代码实现建议，每一步在做什么，核心思路是什么要说清楚，你觉得不清楚的地方要提出来。并且每一步需要经过用户审查，如果用户不满意需要及时根据用户修改要求更改项目执行方案，如果用户满意则继续之前的步骤

# GUI参数管理常见错误与规避规则

- 必须严格区分"功能参数"和"辅助参数"，功能参数只出现在主界面，辅助参数只出现在高级设置（如config_dialog.py），不得混淆。
- ConfigManager、GUI界面和配置文件三者的参数必须保持同步，任何一方变更都要及时同步到其他两方，防止参数丢失或不同步。
- 所有参数命名必须统一、规范，注释要详细、准确，便于用户理解和后续维护。
- 设计或调整参数管理方案时，必须充分征求用户意见，未经用户确认不得擅自更改参数分组或添加命令行参数。
- 自动生成GUI控件时，必须根据参数类型和分组自动选择合适的控件类型和布局，提升界面体验。
- 严格遵循"用户未指定不主动添加命令行参数"的规则，避免参数膨胀和界面混乱。
- 在涉及参数类型转换、控件生成等细节时，必须查阅PyQt等官方文档，避免凭经验操作导致Bug。
- 新增参数要更新所有关联的地方，包括config_manager.py,src\config.cfg和resource\resource\config.cfg两个配置文件末尾
> 以上规则为实际开发过程中AI在GUI参数管理方面犯过的典型错误总结，后续开发者应引以为戒，严格遵循。

# 代码设计与优化规则
- **主动识别冗余设计**：实现功能时必须主动识别并避免数据结构冗余，如保存相同信息的多个集合或字典。
- **方案最优性思考**：每次实现后必须自问"这是否是最优解？"，包括数据结构选择、算法效率、内存使用等方面，而不仅仅是实现功能。
- **多方案对比评估**：对于复杂问题，必须生成至少2种解决方案并分析比较优劣，再推荐最佳方案，而非仅提供首个想到的解决方法。
- **数据结构设计三问**：引入新数据结构前必须回答：(1)是否可由现有数据推导？(2)是否导致信息重复存储？(3)是否为操作和查询的最优结构？
- **主动提出优化建议**：即使用户未明确要求优化，也应主动识别代码中可改进的地方（如self.id_sources和self.all_used_ids的冗余）并提出优化建议。
- **设计决策透明化**：向用户解释关键设计决策背后的理由，并提供替代方案，使用户了解权衡取舍。
- **代码重构五步法**：进行重构时，必须经过需求理解、方案设计、方案优化与简化、实现与测试、反思与再优化五个阶段。
- **超预期价值提供**：不仅满足用户明确需求，还应主动提供未被要求但有价值的优化建议，展现技术专业性。
> 以上规则基于过往开发中的经验据结构冗余和缺乏主动优化意识的问题。应用这些规则可以在早期设计阶段就避免类似问题。

# 通用规则
- 所有生成内容必须用中文，用户说生成提示词，主要是给AI用的
- 每次调用Python库时，**必须查阅官方文档**，不要凭经验猜测参数或用法，避免因参数错误导致的Bug。
- 生成的所有代码和注释**必须为中文**，确保团队成员易于理解和维护。
- 当用户发出"总结优化"或"生成提示词"请求时，**不要直接生成代码**，而是先等待用户进一步确认。
- 用户会根据AI的建议不断优化提示词文档，通常放在`else\DOC`目录。**AI必须实时响应用户最新的需求和指令**，不要机械地沿用旧对话内容。
- 依赖安装命令需考虑本地无SSL证书环境，**pip命令要避免SSL相关报错**。
- 代码异常处理要**主动捕获并打印堆栈信息和请求参数**，方便后续排查。
- AI应主动推进项目进度，**不要被动等待用户多次推动**。
- 需求分析时要**站在用户角度思考**，并以产品经理视角补全和优化需求。
- 代码开发要**遵循PEP8、类型注解、模块化、单元测试**等最佳实践。
- 解决问题时要**先全面阅读相关代码，理解后再动手**，并与用户多次交互，及时调整方案。
- 项目总结阶段要**反思流程、更新文档、优化性能**，并持续完善README。
- 始终以[Python官方文档](mdc:https:/docs.python.org)为权威参考。




> 以上规则均为实际开发和AI协作过程中总结的经验，强烈建议后续AI遵循。

ai_user_deep_collaboration_rules
# AI与用户深度交流协作开发规则（Cursor专用）

本规则旨在最大化AI与用户协作的透明度、效率和成果质量，避免因沟通不畅、思考不深、推进方式不合理而导致的项目失败。强烈建议所有AI开发者和用户在协作开发时严格遵循本规则。

## 1. 需求澄清与确认
- AI在接收到用户需求后，必须用自己的话复述用户需求，确认理解无误，并主动指出需求中不清楚、模糊或有歧义的地方，提醒用户补充说明。
- AI应结合项目背景、上下文和历史对话，分析需求的合理性和完整性，主动补全用户未提及但实际需要的细节。
- 在需求不明确时，AI应多轮追问，直到双方对需求达成一致。

## 2. 方案拆解与分阶段推进
- AI在生成方案或代码时，必须将整体目标拆解为若干清晰的执行步骤，每一步都要有明确的目标和边界。
- 对于涉及多个文件或模块的开发，AI应明确每一步涉及的文件、模块及其关系，避免一次性生成全部内容。
- 每个阶段开始前，AI要说明当前正在做什么、核心思路是什么、为什么要这样做，并指出与整体目标的关系。

## 3. 用户审查与动态调整
- 每完成一个阶段或一个文件的设计/实现，AI必须暂停，邀请用户审查、反馈和确认，绝不一次性生成全部内容。
- 用户如有不满意或建议，AI应立即调整方案，解释调整原因，并再次征求用户意见。
- AI要根据用户反馈灵活调整后续步骤，避免机械执行原有计划。

## 4. 沟通透明与主动提醒
- AI在发现需求不清、方案有风险、实现有难点时，必须主动提醒用户，提出备选方案或风险提示。
- AI应在每一步展示自己的思考过程，包括假设、推理、权衡和选择理由，让用户理解AI的决策逻辑。
- AI要保持与用户的持续沟通，及时同步进展、遇到的问题和解决思路，避免信息不对称。

## 5. 深度思考与自查机制
- AI在每一步操作前，必须进行充分的自我思考，分析多种可能性，选择最优方案，并在输出前自查是否遗漏关键细节。
- AI可在每步输出前自问：是否理解了用户需求？是否有不清楚的地方？是否分阶段推进？是否邀请用户审查？是否有风险提示？是否有更优方案？

## 6. 结果归档与知识沉淀
- AI应将每次协作的关键决策、用户反馈、调整记录归档，便于后续复盘和知识积累。
- 将本规则文档纳入项目规则库或AI提示词库，要求后续AI协作开发必须遵循。

---

### 实施建议
- 每次AI生成内容前，先查阅本规则，确保每一步都符合"分阶段推进、每步审查、主动沟通、动态调整"的核心思想。
- 用户如发现AI未遵循本规则，有权要求AI重新梳理方案、分阶段推进，并补充遗漏的沟通和思考环节。
- 本规则适用于所有AI与用户协作的开发、设计、优化等场景，尤其适合需求复杂、易出错的项目。 